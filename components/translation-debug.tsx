"use client"

import { useLanguage } from "@/contexts/language-context"
import { useEffect } from "react"

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
export function TranslationDebug() {
  const { language } = useLanguage()

  useEffect(() => {
    if (process.env.NODE_ENV === "development") {
      console.log(`üåê Current language: ${language}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤
      const checkForTranslationKeys = () => {
        const allElements = document.querySelectorAll("*")
        const suspiciousElements: Element[] = []

        allElements.forEach((element) => {
          const text = element.textContent
          if (
            text &&
            (text.includes("_") ||
              text.match(/^[a-z]+[A-Z]/) || // camelCase
              text.match(/^[a-z_]+$/)) // snake_case
          ) {
            suspiciousElements.push(element)
          }
        })

        if (suspiciousElements.length > 0) {
          console.warn("üö® Possible untranslated keys found:", suspiciousElements)
        }
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      setTimeout(checkForTranslationKeys, 1000)
    }
  }, [language])

  return null
}
